name: CI/CD

env: aws_access_key = "${{ secrets.TERRAFORM_ACCESS_KEY_ID }}"
  aws_secret_key = "${{ secrets.TERRAFORM_SECRET_ACCESS_KEY }}"
  region = ${{ secrets.AWS_REGION }}

on:
  push:
    branches: [main]

jobs:
  build:
    name: Building ReactJS App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Install dependencies
        run: npm install react-scripts --save

      - name: Fix permission on react-scripts
        run: chmod +x node_modules/.bin/react-scripts

      - name: Run the tests
        run: npm test

      - name: Build
        run: npm run build

  docker-image:
    name: Building and upload Docker image to DockerHub
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Install dependencies
        run: npm install react-scripts --save

      - name: Fix permission on react-scripts
        run: chmod +x node_modules/.bin/react-scripts

      - name: Run the tests
        run: npm test

      - name: Build
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: reactjs
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  deploy-eks:
    name: Deploying Kubernetes Cluster in AWS
    needs: docker-image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: terraform apply
        uses: dflook/terraform-apply@v1
        with:
          variables: |
            aws_access_key = "${{ secrets.TERRAFORM_ACCESS_KEY_ID }}"
            aws_secret_key = "${{ secrets.TERRAFORM_SECRET_ACCESS_KEY }}"

          path: ./terraform
          auto_approve: true
